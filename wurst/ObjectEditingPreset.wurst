package ObjectEditingPreset

import AbilityObjEditing
import BuffObjEditing
import public ObjectIds
import public ObjectIdGenerator
import MapBounds
import HashMap

public function AbilityDefinition.hideIcon()
        this
            ..setButtonPositionNormalX(0)
            ..setButtonPositionNormalY(-11)

public function createNoEffectAbiltiy(int newId) returns AbilityDefinition
    let aDef = new AbilityDefinition(newId, 'Amgl')
        ..setCheckDependencies(false)
        ..setRequirements("")
    return aDef

public function createTargetMissile(int newId, int buffId) returns AbilityDefinitionAlchemistAcidBomb
    let aDef = new AbilityDefinitionAlchemistAcidBomb(newId)
    for i = 1 to 5
        aDef.setBuffs(i, buffId.toRawCode())
        aDef.setArmorPenalty(i, 0)
        aDef.setPrimaryDamage(i, 0)
        aDef.setSecondaryDamage(i, 0)
        aDef.setDamageInterval(i, 10)
        aDef.setDurationHero(i, 1)
        aDef.setDurationNormal(i, 1)
        aDef.setAreaofEffect(i, 0)
    return aDef

public interface OnArtillerHit
    function hit(unit detectionUnit)

public class ArtilleryDetection

    static trigger detectArtilleryTrigger = null
    static HashMap<int, OnArtillerHit> artilleryClosureMap

    private static function detectArtillery()
        if detectArtilleryTrigger == null
            artilleryClosureMap = new HashMap<int, OnArtillerHit>()
            detectArtilleryTrigger = CreateTrigger()
                ..registerEnterRegion(boundRegion, null)
                ..addAction(() ->(begin
                    let unitTypeId = GetTriggerUnit().getTypeId()
                    if artilleryClosureMap.has(unitTypeId)
                        let u = GetTriggerUnit()
                        artilleryClosureMap.get(unitTypeId).hit(u)
                        u.remove()
                end))

    static function registerArtilleryHit(int detectionUnitTypeId, OnArtillerHit onHit)
        detectArtillery()
        artilleryClosureMap.put(detectionUnitTypeId, onHit)

    static function fireArtillery(player owner, int artilleyTypeId, vec2 start, vec2 target)
        createUnit(owner, artilleyTypeId, start, start.angleTo(target))
            ..setTimedLife(1)
            ..issuePointOrder("attackground", target)


    static  function createDetectionDummy() returns int
        let dummyId = UNIT_ID_GEN.next()
        new UnitDefinition(dummyId, 'hfoo')
            ..setNormalAbilities("Aloc")
            ..setModelFile("")
            ..setShadowImageUnit("")
            ..setAttacksEnabled(0)
            ..setMovementType(MovementType.Fly)
            ..setCollisionSize(0)
            ..setFoodCost(0)
            ..setSightRadiusDay(0)
            ..setSightRadiusNight(0)
            ..setUpgradesUsed("")
            ..setUnitSoundSet("")

        return dummyId

        
    static  function createArtilleryDummy(real launchX, real launchY, real launchZ, real scale, string projectile, int missileSpeed, real arc, int detectionUnitTypeId) returns int
        let dummyId = UNIT_ID_GEN.next()
        let abilId = ABIL_ID_GEN.next()
        new UnitDefinition(dummyId, 'umtw')
            ..setNormalAbilities("Aloc,"+abilId.toRawCode())
            ..setModelFile("")
            ..setProjectileLaunchX(launchX)
            ..setProjectileLaunchY(launchY)
            ..setProjectileLaunchZ(launchZ)
            ..setShadowImageUnit("")
            ..setAttack1AnimationBackswingPoint(0)
            ..setAttack1AnimationDamagePoint(0)
            ..setAttack1AreaofEffectTargets("none")
            ..setAttack1CooldownTime(100)
            ..setAttack1ProjectileSpeed(missileSpeed)
            ..setAttack1ProjectileArt(projectile)
            ..setAttack1ProjectileArc(arc)
            ..setAcquisitionRange(100000)
            ..setAttack1Range(100000)
            ..setAttacksEnabled(1)
            ..setMinimumAttackRange(0)
            ..setMovementType(MovementType.Fly)
            ..setCollisionSize(0)
            ..setFoodCost(0)
            ..setSightRadiusDay(0)
            ..setSightRadiusNight(0)
            ..setUpgradesUsed("")
            ..setUnitSoundSet("")
            ..setScaleProjectiles(true)
            ..setScalingValue(scale)

        new AbilityDefinitionPlagueToss(abilId)
            ..setWardUnitType(1, detectionUnitTypeId.toRawCode())
            ..setRequirements("")

        return dummyId



public function createDummyBuff() returns int
    let buffId = BUFF_ID_GEN.next()
    new BuffDefinition(buffId, 'BHwe')
    return buffId

public function createDummyBuff(string name) returns int
    let buffId = BUFF_ID_GEN.next()
    new BuffDefinition(buffId, 'BHwe')
        ..setTooltipNormal(1, name)
    return buffId

public function createBasicBuff(string name, string desc, string icon, string model, string attachment) returns int
    assertTrue(desc != "", "No description set for buff "+name+".")
    assertTrue(name != "", "No name set for buff.")
    assertTrue(not desc.contains(","), ", cannot be displayed in buffs. :(")
    let buffId = BUFF_ID_GEN.next()
    new BuffDefinition(buffId, 'BHwe')
        ..setTooltipNormal(1, name)
        ..setTooltipNormalExtended(1, desc)
        ..setIcon(icon)
        ..setArtTarget(1, model)
        ..setTargetAttachmentPoint0(1, attachment)
    return buffId

public function createAuraBuff(string name, string desc, string icon) returns int
    assertTrue(desc != "", "No description set for buff "+name+".")
    assertTrue(name != "", "No name set for buff.")
    assertTrue(not desc.contains(","), ", cannot be displayed in buffs. :(")

    let buffId = BUFF_ID_GEN.next()
    new BuffDefinition(buffId, 'BHwe')
        ..setTooltipNormal(1, name)
        ..setTooltipNormalExtended(1, desc)
        ..setIcon(icon)
    return buffId

public function createNegativeBuffAbility(int levels, int buffId, string model, string attachment) returns integer
    let abilityId = ABIL_ID_GEN.next()
    let aDef = new AbilityDefinitionAuraSlow(abilityId)
        ..setArtTarget(model)
        ..setTargetAttachmentPoint(attachment)
        ..hideIcon()
    for i = 1 to levels
        aDef
            ..setTargetsAllowed(i, "invulnerable,self,vulnerable")
            ..setAreaofEffect(i, 1)
            ..setMovementSpeedFactor(i, 0)
            ..setAttackSpeedFactor(i, 0)
            ..setBuffs(i, buffId.toRawCode())
    return abilityId

public function createPositiveBuffAbility(int levels, int buffId, string model, string attachment) returns integer
    let abilityId = ABIL_ID_GEN.next()
    let aDef = new AbilityDefinitionUnholyAuracreep(abilityId)
        ..setArtTarget(model)
        ..setTargetAttachmentPoint(attachment)
        ..hideIcon()
    for i = 1 to levels
        aDef
            ..setTargetsAllowed(i, "invulnerable,self,vulnerable")
            ..setAreaofEffect(i, 1)
            ..setMovementSpeedIncrease(i, 0)
            ..setLifeRegenerationIncrease(i, 0)
            ..setBuffs(i, buffId.toRawCode())
    return abilityId

